from enum import Enum, auto
from typing import Optional

from pydantic import BaseModel


class AutoName(Enum):

    def _generate_next_value_(name, start, count, last_values):
        return name.lower()


class Operations(AutoName):
    fetch = auto()
    clean = auto()
    feature_extract = auto()
    label = auto()
    model_train = auto()
    model_test = auto()
    produce_tweet = auto()
    stream_predict = auto()


class TaskModel(BaseModel):
    operation: Operations = None
    persist: Optional[bool] = False
    verbose: Optional[bool] = False
