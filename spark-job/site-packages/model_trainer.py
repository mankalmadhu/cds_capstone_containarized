from pyspark.ml.classification import LogisticRegression, NaiveBayes
from pyspark.ml.feature import VectorAssembler
from pyspark.ml import Pipeline
from ml_boms import MLModels, TrainModel


def train(tweet_df, train_model: TrainModel):
    train_data, test_data = tweet_df.randomSplit([0.8, 0.2])

    feature_assembled_vectors = VectorAssembler(
        inputCols=[feature.name for feature in train_model.features],
        outputCol='assembled_features')

    if train_model.ml_model == MLModels.naive_bayes:
        model = NaiveBayes(featuresCol="assembled_features",
                           labelCol='train_sentiment_index',
                           predictionCol='nb_sentiment_pred',
                           rawPredictionCol='nb_sentiment_raw_pred',
                           probabilityCol='nb_sentiment_pred_proba')
    else:
        model = LogisticRegression(featuresCol="assembled_features",
                                   labelCol='train_sentiment_index',
                                   predictionCol='lr_sentiment_pred',
                                   rawPredictionCol='lr_sentiment_raw_pred',
                                   probabilityCol='lr_sentiment_pred_proba')

    tweet_feature_exraction_pipeline = Pipeline(
        stages=[feature_assembled_vectors, model])

    train_pipeline = tweet_feature_exraction_pipeline.fit(train_data)
    predictions = train_pipeline.transform(test_data)

    return train_pipeline, predictions
