from pyspark.ml import PipelineModel
from pyspark.ml.classification import LogisticRegressionModel
from pyspark.ml.feature import IndexToString
import os


def predict(model_loader, model_path, input_df):
    tweet_pre_processor_model = PipelineModel.load(
        os.environ['tweet_cleaner_pipeline'])

    tweet_feature_extraction_model = PipelineModel.load(
        os.environ['tweet_feature_pipeline'])

    model = model_loader(model_path)

    input_df_pre_processed = tweet_pre_processor_model.transform(input_df)
    input_df_feature_extracted = tweet_feature_extraction_model.transform(
        input_df_pre_processed)

    input_predictions = model.transform(input_df_feature_extracted)

    input_predictions = IndexToString(inputCol="prediction",\
                                            outputCol="predicted_sentiment_string",\
                                            labels = ["Negative","Neutral","Positive"]).\
                                                transform(input_predictions)

    return input_predictions


def test(spark):

    columns = ["text", "id_str"]

    data = [("Good tweet", '2'), ("Bad tweet", '10')]
    test_df = spark.createDataFrame(data).toDF(*columns)

    return predict(LogisticRegressionModel.load,
                   os.environ['trained_model_pipeline'], test_df)
