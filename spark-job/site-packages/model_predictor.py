from pyspark.ml import PipelineModel
from pyspark.ml.feature import IndexToString
from ml_boms import MLModels, PipelinePathConfig
import os


def predict(pipeline_tuple, input_df):
    tweet_pre_processor_model = pipeline_tuple[0]

    tweet_feature_extraction_model = pipeline_tuple[1]

    model = pipeline_tuple[2]

    input_df_pre_processed = tweet_pre_processor_model.transform(input_df)
    input_df_feature_extracted = tweet_feature_extraction_model.transform(
        input_df_pre_processed)

    input_predictions = model.transform(input_df_feature_extracted)

    input_predictions = IndexToString(inputCol="lr_sentiment_pred",\
                                            outputCol="predicted_sentiment_string",\
                                            labels = ["Negative","Neutral","Positive"]).\
                                                transform(input_predictions)

    return input_predictions


def load_pipelines(ml_model: MLModels):
    pipeline_path = PipelinePathConfig.get_pipeline_path_config()

    model_pipeline_path = os.path.join(pipeline_path.trained_model_pipeline,
                                       ml_model.name())

    return (PipelineModel.load(pipeline_path.tweet_cleaner_pipeline),
            PipelineModel.load(pipeline_path.tweet_feature_pipeline),
            PipelineModel.load(model_pipeline_path))


def test(spark):

    columns = ["text", "id_str"]

    data = [("Good tweet", '2'), ("Bad tweet", '10')]
    test_df = spark.createDataFrame(data).toDF(*columns)

    return predict(load_pipelines(MLModels.logistic_regression), test_df)
