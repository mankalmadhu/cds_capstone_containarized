import os

from celery import Celery, states
import subprocess
from celery.utils.log import get_task_logger
from celery.exceptions import Ignore

celery = Celery(__name__)
celery.conf.broker_url = os.environ.get("CELERY_BROKER_URL")
celery.conf.result_backend = os.environ.get("CELERY_RESULT_BACKEND")

logger = get_task_logger(__name__)


@celery.task(name="create_task", bind=True)
def create_task(self, command_options):

    commands = [
        '/opt/spark/bin/spark-submit',
        'local:///opt/application/site-packages/spark_driver.py',
    ]

    commands.append(command_options)

    commands.append('>> /tmp/spark-submit.log')

    try:
        logger.info(f'Sending Command:{commands}')
        subprocess.check_output(" ".join(commands), shell=True)

    except subprocess.CalledProcessError as e:
        logger.info(e.output)
        self.update_state(state=states.FAILURE)
        raise Ignore()

    return True
