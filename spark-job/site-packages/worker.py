import os
import time

from celery import Celery, states
import subprocess
from celery.utils.log import get_task_logger
from celery.exceptions import Ignore

celery = Celery(__name__)
celery.conf.broker_url = os.environ["CELERY_BROKER_URL"]
celery.conf.result_backend = os.environ["CELERY_RESULT_BACKEND"]

logger = get_task_logger(__name__)


@celery.task(name="create_task", bind=True)
def create_task(self, operation, persist, verbose):
    try:
        commands = [
            '/opt/spark/bin/spark-submit',
            'local:///opt/application/site-packages/main.py',
            '--ops',
            operation,
            '-s' if persist else '',
            '-v' if verbose else '',
            '> /tmp/spark-submit.log',
        ]

        subprocess.check_output(" ".join(commands), shell=True)

    except subprocess.CalledProcessError as e:
        logger.info(e.output)
        self.update_state(state=states.FAILURE)
        raise Ignore()

    return True
