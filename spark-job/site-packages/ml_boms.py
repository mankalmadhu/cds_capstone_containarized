from enum import Enum, auto
from typing import Optional, List
from datetime import datetime

from pydantic import BaseModel, BaseSettings, Field, validator
from functools import lru_cache


class AutoName(Enum):

    def _generate_next_value_(name, start, count, last_values):
        return name.lower()


class Operations(AutoName):
    fetch = auto()
    clean = auto()
    feature_extract = auto()
    label = auto()
    model_train = auto()
    model_test = auto()
    produce_tweet = auto()
    stream_predict = auto()


class FeatureColumns(str, AutoName):
    lemmatized_text = auto()
    idf_features = auto()
    idf_bi_gram_features = auto()
    cv_features = auto()
    cv_bi_gram_features = auto()
    word2_vec_features = auto()


class MLModels(str, AutoName):
    logistic_regression = auto()
    naive_bayes = auto()
    lstm = auto()


class TaskBaseModel(BaseModel):
    save: Optional[bool] = False
    verbose: Optional[bool] = False


class FetchDataModel(TaskBaseModel):
    fetch_date: Optional[datetime] = None
    total_tweets_to_fetch: Optional[int] = Field(10, gt=10, lt=10000)


class TrainModel(TaskBaseModel):
    ml_model: Optional[MLModels] = MLModels.logistic_regression
    features: Optional[List[FeatureColumns]] = [
        FeatureColumns.word2_vec_features, FeatureColumns.cv_features
    ]


class TwitterCreds(BaseSettings):
    twitter_access_key: str
    twitter_access_secret: str
    twitter_consumer_key: str
    twitter_consumer_secret: str

    class Config:
        env_file = ".env"

    @classmethod
    @lru_cache
    def get_twiiter_creds(cls):
        return TwitterCreds()
